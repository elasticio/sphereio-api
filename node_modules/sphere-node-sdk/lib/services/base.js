var BaseService, HttpError, Promise, REGEX_LAST, SphereHttpError, Utils, _, debug, ref;

debug = require('debug')('sphere-client');

_ = require('underscore');

_.mixin(require('underscore-mixins'));

Promise = require('bluebird');

Utils = require('../utils');

ref = require('../errors'), HttpError = ref.HttpError, SphereHttpError = ref.SphereHttpError;

REGEX_LAST = /^(\d+)([s|m|h|d|w])$/;

BaseService = (function() {
  BaseService.baseResourceEndpoint = '';

  function BaseService(options) {
    if (options == null) {
      options = {};
    }
    this._rest = options._rest, this._task = options._task, this._stats = options._stats;
    this._setDefaults();
  }

  BaseService.prototype._setDefaults = function() {
    this._currentEndpoint = this.constructor.baseResourceEndpoint;
    return this._params = {
      encoded: ['where', 'expand', 'sort'],
      query: {
        where: [],
        operator: 'and',
        sort: [],
        expand: []
      }
    };
  };

  BaseService.prototype.byId = function(id) {
    this._currentEndpoint = this.constructor.baseResourceEndpoint + "/" + id;
    this._params.id = id;
    debug('setting endpoint id: %j', this._currentEndpoint);
    return this;
  };

  BaseService.prototype.where = function(predicate) {
    var encodedPredicate;
    if (!predicate) {
      return this;
    }
    encodedPredicate = encodeURIComponent(predicate);
    this._params.query.where.push(encodedPredicate);
    debug('setting predicate: %s', predicate);
    return this;
  };

  BaseService.prototype.whereOperator = function(operator) {
    if (operator == null) {
      operator = 'and';
    }
    this._params.query.operator = (function() {
      switch (operator) {
        case 'and':
        case 'or':
          return operator;
        default:
          return 'and';
      }
    })();
    debug('setting where operator: %s', operator);
    return this;
  };

  BaseService.prototype.last = function(period) {
    var amount, before, dateTime, matches, now;
    if (!REGEX_LAST.test(period)) {
      throw new Error("Cannot parse period '" + period + "'");
    }
    matches = REGEX_LAST.exec(period);
    amount = matches[1];
    if (amount === '0') {
      return this;
    }
    before = Utils.getTime(amount, matches[2]);
    now = new Date().getTime();
    dateTime = new Date(now - before).toISOString();
    return this.where("lastModifiedAt > \"" + dateTime + "\"");
  };

  BaseService.prototype.sort = function(path, ascending) {
    var direction;
    if (ascending == null) {
      ascending = true;
    }
    direction = ascending ? 'asc' : 'desc';
    this._params.query.sort.push(encodeURIComponent(path + " " + direction));
    debug('setting sort: %s %s', path, direction);
    return this;
  };

  BaseService.prototype.page = function(page) {
    if (_.isNumber(page) && page < 1) {
      throw new Error('Page must be a number >= 1');
    }
    this._params.query.page = page;
    debug('setting page: %s', page);
    return this;
  };

  BaseService.prototype.perPage = function(perPage) {
    if (_.isNumber(perPage) && perPage < 0) {
      throw new Error('PerPage (limit) must be a number >= 0');
    }
    this._params.query.perPage = perPage;
    debug('setting perPage: %s', perPage);
    return this;
  };

  BaseService.prototype.all = function() {
    return this.perPage(0);
  };

  BaseService.prototype.expand = function(expansionPath) {
    var encodedExpansionPath;
    if (!expansionPath) {
      return this;
    }
    encodedExpansionPath = encodeURIComponent(expansionPath);
    this._params.query.expand.push(encodedExpansionPath);
    debug('setting expand: %s', expansionPath);
    return this;
  };

  BaseService.prototype.byQueryString = function(query, withEncodedParams) {
    var parsed;
    if (withEncodedParams == null) {
      withEncodedParams = false;
    }
    parsed = _.parseQuery(query, false);
    if (!withEncodedParams) {
      _.each(this._params.encoded, function(param) {
        if (parsed[param]) {
          return parsed[param] = _.map(_.flatten([parsed[param]]), function(p) {
            return encodeURIComponent(p);
          });
        }
      });
    }
    this._params.queryString = _.stringifyQuery(parsed);
    debug('setting queryString: %s', query);
    return this;
  };

  BaseService.prototype._queryString = function() {
    var qs;
    qs = this._params.queryString ? this._params.queryString : Utils.buildQueryString({
      where: this._params.query.where,
      whereOperator: this._params.query.operator,
      page: this._params.query.page,
      perPage: this._params.query.perPage,
      sort: this._params.query.sort,
      expand: this._params.query.expand
    });
    debug('built query string: %s', qs);
    return qs;
  };

  BaseService.prototype.fetch = function() {
    var _getEndpoint;
    _getEndpoint = (function(_this) {
      return function() {
        var endpoint, queryString;
        queryString = _this._queryString();
        endpoint = _this._currentEndpoint;
        if (queryString) {
          endpoint += "?" + queryString;
        }
        return endpoint;
      };
    })(this);
    if (!this._params.queryString && this._params.query.perPage === 0) {
      if (_.isEmpty(this._params.query.sort)) {
        this.sort('id');
      }
      return this._paged(_getEndpoint());
    } else {
      return this._get(_getEndpoint());
    }
  };

  BaseService.prototype.process = function(fn, options) {
    if (options == null) {
      options = {};
    }
    if (!_.isFunction(fn)) {
      throw new Error('Please provide a function to process the elements');
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var _processPage, endpoint, originalQuery;
        options = _.defaults(options, {
          accumulate: true
        });
        endpoint = _this.constructor.baseResourceEndpoint;
        originalQuery = _this._params.query;
        _processPage = function(page, perPage, total, acc) {
          var queryString;
          if (acc == null) {
            acc = [];
          }
          debug('processing next page with params: %j', {
            page: page,
            perPage: perPage,
            offset: (page - 1) * perPage,
            total: total
          });
          if ((total != null) && (page - 1) * perPage >= total) {
            return resolve(acc);
          } else {
            _this._params.query = _.extend({}, originalQuery, {
              page: page,
              perPage: perPage
            });
            if (_.isEmpty(_this._params.query.sort)) {
              _this.sort('id');
            }
            queryString = _this._queryString();
            return _this._get(endpoint + "?" + queryString).then(function(payload) {
              return fn(payload).then(function(result) {
                var accumulated, newTotal, nextPage;
                newTotal = payload.body.total;
                if (!total || total === newTotal) {
                  nextPage = page + 1;
                } else if (total < newTotal) {
                  nextPage = page;
                  debug('Total is bigger then before, assuming something has been newly created. Processing the same page (%s).', nextPage);
                } else {
                  nextPage = page - 1;
                  if (nextPage < 1) {
                    nextPage = 1;
                  }
                  debug('Total is lesser then before, assuming something has been deleted. Reducing page to %s (min 1).', nextPage);
                }
                if (options.accumulate) {
                  accumulated = acc.concat(result);
                }
                return _processPage(nextPage, perPage, newTotal, accumulated);
              });
            })["catch"](function(error) {
              return reject(error);
            }).done();
          }
        };
        return _processPage(_this._params.query.page || 1, _this._params.query.perPage || 20);
      };
    })(this));
  };

  BaseService.prototype.save = function(body) {
    var endpoint;
    if (!body) {
      throw new Error("Body payload is required for creating a resource (endpoint: " + this.constructor.baseResourceEndpoint + ")");
    }
    endpoint = this.constructor.baseResourceEndpoint;
    return this._save(endpoint, body);
  };

  BaseService.prototype.create = function() {
    return this.save.apply(this, arguments);
  };

  BaseService.prototype.update = function(body) {
    var endpoint;
    if (!this._params.id) {
      throw new Error("Missing resource id. You can set it by chaining '.byId(ID)'");
    }
    if (!body) {
      throw new Error("Body payload is required for updating a resource (endpoint: " + this._currentEndpoint + ")");
    }
    endpoint = this._currentEndpoint;
    return this._save(endpoint, body);
  };

  BaseService.prototype["delete"] = function(version) {
    var endpoint;
    if (!version) {
      throw new Error("Version is required for deleting a resource (endpoint: " + this._currentEndpoint + ")");
    }
    endpoint = this._currentEndpoint + "?version=" + version;
    return this._delete(endpoint);
  };

  BaseService.prototype._get = function(endpoint) {
    this._setDefaults();
    return this._task.addTask((function(_this) {
      return function() {
        var originalRequest;
        originalRequest = {
          endpoint: endpoint
        };
        return new Promise(function(resolve, reject) {
          return _this._rest.GET(endpoint, function() {
            return _this._wrapResponse.apply(_this, [resolve, reject, originalRequest].concat(_.toArray(arguments)));
          });
        });
      };
    })(this));
  };

  BaseService.prototype._paged = function(endpoint) {
    this._setDefaults();
    return this._task.addTask((function(_this) {
      return function() {
        var originalRequest;
        originalRequest = {
          endpoint: endpoint
        };
        return new Promise(function(resolve, reject) {
          return _this._rest.PAGED(endpoint, function() {
            return _this._wrapResponse.apply(_this, [resolve, reject, originalRequest].concat(_.toArray(arguments)));
          });
        });
      };
    })(this));
  };

  BaseService.prototype._save = function(endpoint, payload) {
    this._setDefaults();
    return this._task.addTask((function(_this) {
      return function() {
        var originalRequest;
        originalRequest = {
          endpoint: endpoint,
          payload: payload
        };
        return new Promise(function(resolve, reject) {
          return _this._rest.POST(endpoint, payload, function() {
            return _this._wrapResponse.apply(_this, [resolve, reject, originalRequest].concat(_.toArray(arguments)));
          });
        });
      };
    })(this));
  };

  BaseService.prototype._delete = function(endpoint) {
    this._setDefaults();
    return this._task.addTask((function(_this) {
      return function() {
        var originalRequest;
        originalRequest = {
          endpoint: endpoint
        };
        return new Promise(function(resolve, reject) {
          return _this._rest.DELETE(endpoint, function() {
            return _this._wrapResponse.apply(_this, [resolve, reject, originalRequest].concat(_.toArray(arguments)));
          });
        });
      };
    })(this));
  };

  BaseService.prototype._wrapResponse = function(resolve, reject, originalRequest, error, response, body) {
    var endpoint, errorBody, errorMessage, errorResp, ref1, ref2, responseJson;
    responseJson = this._stats.includeHeaders ? {
      http: {
        request: {
          method: response.request.method,
          httpVersion: response.httpVersion,
          uri: response.request.uri,
          header: response.req._header,
          headers: response.request.headers
        },
        response: {
          headers: response.headers
        }
      }
    } : {};
    if (error) {
      if (error instanceof Error) {
        errorMessage = error.message;
      } else {
        errorMessage = error;
      }
      errorResp = {
        statusCode: (response != null ? response.statusCode : void 0) || 500,
        message: errorMessage,
        originalRequest: originalRequest
      };
      if (body) {
        errorResp.body = body;
      }
      errorBody = _.extend(responseJson, errorResp);
      return reject(new HttpError(errorMessage, errorBody));
    } else {
      if ((ref1 = response.headers) != null ? ref1['X-DEPRECATION-NOTICE'] : void 0) {
        console.warn("Deprecation notice: " + response.headers['X-DEPRECATION-NOTICE']);
      }
      if ((200 <= (ref2 = response.statusCode) && ref2 < 300)) {
        return resolve(_.extend(responseJson, {
          statusCode: response.statusCode,
          body: body
        }));
      } else if (response.statusCode === 404) {
        endpoint = response.request.uri.path;
        return reject(new SphereHttpError.NotFound("Endpoint '" + endpoint + "' not found.", _.extend(responseJson, {
          statusCode: 404,
          message: "Endpoint '" + endpoint + "' not found.",
          originalRequest: originalRequest
        })));
      } else {
        errorMessage = body.message || body.error_description || body.error || 'Undefined SPHERE.IO error message';
        errorBody = _.extend(responseJson, body, {
          statusCode: body.statusCode || response.statusCode,
          originalRequest: originalRequest
        });
        return reject((function() {
          switch (errorBody.statusCode) {
            case 400:
              return new SphereHttpError.BadRequest(errorMessage, errorBody);
            case 401:
              return new SphereHttpError.Unauthorized(errorMessage, errorBody);
            case 409:
              return new SphereHttpError.ConcurrentModification(errorMessage, errorBody);
            case 500:
              return new SphereHttpError.InternalServerError(errorMessage, errorBody);
            case 503:
              return new SphereHttpError.ServiceUnavailable(errorMessage, errorBody);
            default:
              return new HttpError(require('http').STATUS_CODES[response.statusCode], _.extend(responseJson, {
                statusCode: response.statusCode,
                originalRequest: originalRequest
              }));
          }
        })());
      }
    }
  };

  return BaseService;

})();

module.exports = BaseService;
