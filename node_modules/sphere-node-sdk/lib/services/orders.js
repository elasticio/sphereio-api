var BaseService, OrderService,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

BaseService = require('./base');

OrderService = (function(superClass) {
  extend(OrderService, superClass);

  function OrderService() {
    return OrderService.__super__.constructor.apply(this, arguments);
  }

  OrderService.baseResourceEndpoint = '/orders';


  /**
   * Creates directly an Order by importing it instead of creating it from a Cart.
   * @param {Object} body The payload as JSON object
   * @return {Promise} A promise, fulfilled with an {Object} or rejected with a {SphereError}
   */

  OrderService.prototype["import"] = function(body) {
    var endpoint;
    endpoint = '/orders/import';
    if (!body) {
      throw new Error("Body payload is required for creating a resource (endpoint: " + endpoint + ")");
    }
    return this._save(endpoint, body);
  };

  OrderService.prototype["delete"] = function() {};

  return OrderService;

})(BaseService);

module.exports = OrderService;
