var BaseService, ProductProjectionService, debug, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

debug = require('debug')('sphere-client');

_ = require('underscore');

BaseService = require('./base');


/**
 * Creates a new ProductProjectionService.
 * @class ProductProjectionService
 */

ProductProjectionService = (function(_super) {
  __extends(ProductProjectionService, _super);

  function ProductProjectionService() {
    return ProductProjectionService.__super__.constructor.apply(this, arguments);
  }


  /**
   * @const
   * @private
   * Base path for a ProductProjections API resource endpoint
   * @type {String}
   */

  ProductProjectionService.baseResourceEndpoint = '/product-projections';


  /**
   * @private
   * Reset default query/search params
   */

  ProductProjectionService.prototype._setDefaults = function() {
    ProductProjectionService.__super__._setDefaults.call(this);
    _.extend(this._params.query, {
      staged: false,
      filter: [],
      filterByQuery: [],
      filterByFacets: [],
      facet: [],
      searchKeywords: []
    });
    return _.extend(this._params, {
      encoded: ['where', 'expand', 'sort', 'filter', 'filter.query', 'filter.facets', 'facets']
    });
  };


  /**
   * Define whether to query for staged or current product projection.
   * @param Boolean [staged] true to query staged products (default). False to query published products
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.staged = function(staged) {
    if (staged == null) {
      staged = true;
    }
    this._params.query.staged = staged;
    debug('setting staged: %s', staged);
    return this;
  };


  /**
   * Define the text to analyze and search.
   * @param {String} [text] A string for the `text` search parameter.
   * @param {String} language An ISO language tag, used for search the given text.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.text = function(text, language) {
    if (!language) {
      throw new Error('Language parameter is required for searching');
    }
    this._params.query.text = {
      lang: language,
      value: text
    };
    debug('setting text.%s: %s', language, text);
    return this;
  };


  /**
   * Define a {Filter} used for filtering searched product projections.
   * @link http://dev.sphere.io/http-api-projects-products-search.html#search-filters
   * @param {String} [filter] A {Filter} string for the `filter` search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.filter = function(filter) {
    var encodedFilter;
    if (!filter) {
      return this;
    }
    encodedFilter = encodeURIComponent(filter);
    this._params.query.filter.push(encodedFilter);
    debug('setting filter: %s', filter);
    return this;
  };


  /**
   * Define a {Filter} (applied to query result) used for filtering searched product projections.
   * @link http://dev.sphere.io/http-api-projects-products-search.html#search-filters
   * @param {String} [filter] A {Filter} string for the `filter.query` search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.filterByQuery = function(filter) {
    var encodedFilter;
    if (!filter) {
      return this;
    }
    encodedFilter = encodeURIComponent(filter);
    this._params.query.filterByQuery.push(encodedFilter);
    debug('setting filter.query: %s', filter);
    return this;
  };


  /**
   * Define a {Filter} (applied to facet calculation) used for filtering searched product projections.
   * @link http://dev.sphere.io/http-api-projects-products-search.html#search-filters
   * @param {String} [filter] A {Filter} string for the `filter.facets` search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.filterByFacets = function(filter) {
    var encodedFilter;
    if (!filter) {
      return this;
    }
    encodedFilter = encodeURIComponent(filter);
    this._params.query.filterByFacets.push(encodedFilter);
    debug('setting filter.facets: %s', filter);
    return this;
  };


  /**
   * Define a {Facet} used for calculating statistical counts for searched product projections.
   * @link http://dev.sphere.io/http-api-projects-products-search.html#search-facets
   * @param {String} [facet] A {Facet} string for the `facet` search parameter.
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.facet = function(facet) {
    var encodedFacet;
    if (!facet) {
      return this;
    }
    encodedFacet = encodeURIComponent(facet);
    this._params.query.facet.push(encodedFacet);
    debug('setting facet: %s', facet);
    return this;
  };


  /**
   * Define a {Suggestion} used for matching tokens for product projections, via a suggest tokenizer.
   * @link http://dev.sphere.io/http-api-projects-products-search.html#suggest
   * @param {String} [facet] A {Facet} string for the `facet` search parameter.
   * @throws {Error} If text or lang is not defined
   * @return {ProductProjectionService} Chained instance of this class
   */

  ProductProjectionService.prototype.searchKeywords = function(text, lang) {
    if (!text) {
      throw new Error('Suggestion text parameter is required for searching for a suggestion');
    }
    if (!lang) {
      throw new Error('Language parameter is required for searching for a suggestion');
    }
    this._params.query.searchKeywords.push({
      text: text,
      lang: lang
    });
    debug('setting searchKeywords: %s, %s', text, lang);
    return this;
  };


  /**
   * @private
   * Build a query string from (pre)defined params and custom search params.
   * @return {String} the query string
   */

  ProductProjectionService.prototype._queryString = function() {
    var customQueryString, facet, filter, filterByFacets, filterByQuery, searchKeywords, staged, text, _ref;
    _ref = _.defaults(this._params.query, {
      staged: false,
      filter: [],
      filterByQuery: [],
      filterByFacets: [],
      facet: [],
      searchKeywords: []
    }), staged = _ref.staged, text = _ref.text, filter = _ref.filter, filterByQuery = _ref.filterByQuery, filterByFacets = _ref.filterByFacets, facet = _ref.facet, searchKeywords = _ref.searchKeywords;
    customQueryString = [];
    if (staged) {
      customQueryString.push("staged=" + staged);
    }
    if (text) {
      customQueryString.push("text." + text.lang + "=" + text.value);
    }
    _.each(filter, function(f) {
      return customQueryString.push("filter=" + f);
    });
    _.each(filterByQuery, function(f) {
      return customQueryString.push("filter.query=" + f);
    });
    _.each(filterByFacets, function(f) {
      return customQueryString.push("filter.facets=" + f);
    });
    _.each(facet, function(f) {
      return customQueryString.push("facet=" + f);
    });
    _.each(searchKeywords, function(keys) {
      return customQueryString.push("searchKeywords." + keys.lang + "=" + keys.text);
    });
    return _.compact([ProductProjectionService.__super__._queryString.call(this)].concat(customQueryString)).join('&');
  };


  /**
   * Search product projections with search parameters
   * @return {Promise} A promise, fulfilled with an {Object} or rejected with a {SphereError}
   */

  ProductProjectionService.prototype.search = function() {
    this._currentEndpoint = '/product-projections/search';
    return this.fetch();
  };


  /**
   * Query suggestions based on search keywords (used e.g. for auto-complete functionality)
   * @param  {String} suggestion A suggestion text to search for
   * @param  {String} language An ISO language tag, used for suggestion search for the 'searchKeywords' param
   * @return {Promise} A promise, fulfilled with an {Object} or rejected with a {SphereError}
   */

  ProductProjectionService.prototype.suggest = function() {
    this._currentEndpoint = '/product-projections/suggest';
    return this.fetch();
  };

  return ProductProjectionService;

})(BaseService);


/**
 * The {@link ProductProjectionService} service.
 */

module.exports = ProductProjectionService;
