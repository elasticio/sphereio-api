var BaseService, ProductProjectionService, _, debug,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

debug = require('debug')('sphere-client');

_ = require('underscore');

BaseService = require('./base');

ProductProjectionService = (function(superClass) {
  extend(ProductProjectionService, superClass);

  function ProductProjectionService() {
    return ProductProjectionService.__super__.constructor.apply(this, arguments);
  }

  ProductProjectionService.baseResourceEndpoint = '/product-projections';

  ProductProjectionService.prototype._setDefaults = function() {
    ProductProjectionService.__super__._setDefaults.call(this);
    _.extend(this._params.query, {
      staged: false,
      filter: [],
      filterByQuery: [],
      filterByFacets: [],
      facet: [],
      searchKeywords: []
    });
    return _.extend(this._params, {
      encoded: ['where', 'expand', 'sort', 'filter', 'filter.query', 'filter.facets', 'facets']
    });
  };

  ProductProjectionService.prototype.staged = function(staged) {
    if (staged == null) {
      staged = true;
    }
    this._params.query.staged = staged;
    debug('setting staged: %s', staged);
    return this;
  };

  ProductProjectionService.prototype.text = function(text, language) {
    if (!language) {
      throw new Error('Language parameter is required for searching');
    }
    this._params.query.text = {
      lang: language,
      value: encodeURIComponent(text)
    };
    debug('setting text.%s: %s', language, text);
    return this;
  };

  ProductProjectionService.prototype.filter = function(filter) {
    var encodedFilter;
    if (!filter) {
      return this;
    }
    encodedFilter = encodeURIComponent(filter);
    this._params.query.filter.push(encodedFilter);
    debug('setting filter: %s', filter);
    return this;
  };

  ProductProjectionService.prototype.filterByQuery = function(filter) {
    var encodedFilter;
    if (!filter) {
      return this;
    }
    encodedFilter = encodeURIComponent(filter);
    this._params.query.filterByQuery.push(encodedFilter);
    debug('setting filter.query: %s', filter);
    return this;
  };

  ProductProjectionService.prototype.filterByFacets = function(filter) {
    var encodedFilter;
    if (!filter) {
      return this;
    }
    encodedFilter = encodeURIComponent(filter);
    this._params.query.filterByFacets.push(encodedFilter);
    debug('setting filter.facets: %s', filter);
    return this;
  };

  ProductProjectionService.prototype.facet = function(facet) {
    var encodedFacet;
    if (!facet) {
      return this;
    }
    encodedFacet = encodeURIComponent(facet);
    this._params.query.facet.push(encodedFacet);
    debug('setting facet: %s', facet);
    return this;
  };

  ProductProjectionService.prototype.searchKeywords = function(text, lang) {
    if (!text) {
      throw new Error('Suggestion text parameter is required for searching for a suggestion');
    }
    if (!lang) {
      throw new Error('Language parameter is required for searching for a suggestion');
    }
    this._params.query.searchKeywords.push({
      text: encodeURIComponent(text),
      lang: lang
    });
    debug('setting searchKeywords: %s, %s', text, lang);
    return this;
  };

  ProductProjectionService.prototype._queryString = function() {
    var customQueryString, facet, filter, filterByFacets, filterByQuery, ref, searchKeywords, staged, text;
    ref = _.defaults(this._params.query, {
      staged: false,
      filter: [],
      filterByQuery: [],
      filterByFacets: [],
      facet: [],
      searchKeywords: []
    }), staged = ref.staged, text = ref.text, filter = ref.filter, filterByQuery = ref.filterByQuery, filterByFacets = ref.filterByFacets, facet = ref.facet, searchKeywords = ref.searchKeywords;
    customQueryString = [];
    if (staged) {
      customQueryString.push("staged=" + staged);
    }
    if (text) {
      customQueryString.push("text." + text.lang + "=" + text.value);
    }
    _.each(filter, function(f) {
      return customQueryString.push("filter=" + f);
    });
    _.each(filterByQuery, function(f) {
      return customQueryString.push("filter.query=" + f);
    });
    _.each(filterByFacets, function(f) {
      return customQueryString.push("filter.facets=" + f);
    });
    _.each(facet, function(f) {
      return customQueryString.push("facet=" + f);
    });
    _.each(searchKeywords, function(keys) {
      return customQueryString.push("searchKeywords." + keys.lang + "=" + keys.text);
    });
    return _.compact([ProductProjectionService.__super__._queryString.call(this)].concat(customQueryString)).join('&');
  };

  ProductProjectionService.prototype.search = function() {
    return this.asSearch().fetch();
  };

  ProductProjectionService.prototype.asSearch = function() {
    this._currentEndpoint = '/product-projections/search';
    debug('setting search endpoint: %s', this._currentEndpoint);
    return this;
  };


  /**
   * Query suggestions based on search keywords (used e.g. for auto-complete functionality)
   * @param  {String} suggestion A suggestion text to search for
   * @param  {String} language An ISO language tag, used for suggestion search for the 'searchKeywords' param
   * @return {Promise} A promise, fulfilled with an {Object} or rejected with a {SphereError}
   */

  ProductProjectionService.prototype.suggest = function() {
    this._currentEndpoint = '/product-projections/suggest';
    debug('setting suggest endpoint: %s', this._currentEndpoint);
    return this.fetch();
  };

  ProductProjectionService.prototype.save = function() {};

  ProductProjectionService.prototype.create = function() {};

  ProductProjectionService.prototype.update = function() {};

  ProductProjectionService.prototype["delete"] = function() {};

  return ProductProjectionService;

})(BaseService);

module.exports = ProductProjectionService;
