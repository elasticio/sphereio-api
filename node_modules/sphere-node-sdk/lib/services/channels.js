var BaseService, ChannelService, Promise, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('underscore');

_.mixin({
  containsAll: function(from, to) {
    return _.all(from, function(x) {
      return _.contains(to, x);
    });
  }
});

Promise = require('bluebird');

BaseService = require('./base');

ChannelService = (function(superClass) {
  extend(ChannelService, superClass);

  function ChannelService() {
    return ChannelService.__super__.constructor.apply(this, arguments);
  }

  ChannelService.baseResourceEndpoint = '/channels';

  ChannelService.prototype.ensure = function(key, roles) {
    if (!key) {
      throw new Error('Key is required.');
    }
    if (!roles) {
      throw new Error('Role is required.');
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var endpoint, queryString;
        roles = _.flatten([roles]);
        _this._setDefaults();
        _this.where("key=\"" + key + "\"").page(1).perPage(1);
        queryString = _this._queryString();
        endpoint = _this._currentEndpoint + "?" + (_this._queryString());
        return _this._get(endpoint).then(function(result) {
          var channel, update;
          if (result.body.total === 1) {
            channel = result.body.results[0];
            if (!_.containsAll(roles, channel.roles)) {
              update = {
                version: channel.version,
                actions: [
                  {
                    action: 'addRoles',
                    roles: _.difference(roles, channel.roles)
                  }
                ]
              };
              return resolve(_this.byId(channel.id).update(update));
            } else {
              return resolve({
                statusCode: result.statusCode,
                body: channel
              });
            }
          } else if (result.body.total === 0) {
            channel = {
              key: key,
              roles: roles
            };
            return resolve(_this.save(channel));
          } else {
            return reject(new Error(result.body.total + " channels with key = '" + key + "' found (key should be unique for a project)."));
          }
        })["catch"](function(result) {
          return reject(result);
        });
      };
    })(this));
  };

  return ChannelService;

})(BaseService);

module.exports = ChannelService;
