var BaseService, ChannelService, Promise, _,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

_ = require('underscore');

_.mixin({
  containsAll: function(from, to) {
    return _.all(from, function(x) {
      return _.contains(to, x);
    });
  }
});

Promise = require('bluebird');

BaseService = require('./base');


/**
 * Creates a new ChannelService.
 * @class ChannelService
 */

ChannelService = (function(_super) {
  __extends(ChannelService, _super);

  function ChannelService() {
    return ChannelService.__super__.constructor.apply(this, arguments);
  }


  /**
   * @const
   * @private
   * Base path for a Channels API resource endpoint
   * @type {String}
   */

  ChannelService.baseResourceEndpoint = '/channels';


  /**
   * Retrieves the first found channel result for a given key and roles.
   * If not existing, the channel will be created or the channel roles will be
   * added if absent.
  
   * @param {String} key A unique identifier for channel within the project.
   * @param {Array} roles A list of {ChannelRole} the channel must have.
   * @throws {Error} If a required argument is missing
   * @return {Promise} A promise, fulfilled with an {Object} or rejected with a {SphereError}
   */

  ChannelService.prototype.ensure = function(key, roles) {
    if (!key) {
      throw new Error('Key is required.');
    }
    if (!roles) {
      throw new Error('Role is required.');
    }
    return new Promise((function(_this) {
      return function(resolve, reject) {
        var endpoint, queryString;
        roles = _.flatten([roles]);
        _this._setDefaults();
        _this.where("key=\"" + key + "\"").page(1).perPage(1);
        queryString = _this._queryString();
        endpoint = "" + _this._currentEndpoint + "?" + (_this._queryString());
        return _this._get(endpoint).then(function(result) {
          var channel, update;
          if (result.body.total === 1) {
            channel = result.body.results[0];
            if (!_.containsAll(roles, channel.roles)) {
              update = {
                version: channel.version,
                actions: [
                  {
                    action: 'addRoles',
                    roles: _.difference(roles, channel.roles)
                  }
                ]
              };
              return resolve(_this.byId(channel.id).update(update));
            } else {
              return resolve({
                statusCode: result.statusCode,
                body: channel
              });
            }
          } else if (result.body.total === 0) {
            channel = {
              key: key,
              roles: roles
            };
            return resolve(_this.save(channel));
          } else {
            return reject(new Error("" + result.body.total + " channels with key = '" + key + "' found (key should be unique for a project)."));
          }
        })["catch"](function(result) {
          return reject(result);
        });
      };
    })(this));
  };

  return ChannelService;

})(BaseService);


/**
 * The {@link ChannelService} service.
 */

module.exports = ChannelService;
