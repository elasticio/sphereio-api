/* ===========================================================
# sphere-node-sdk - v1.3.5
# ==============================================================
# Copyright (c) 2015 SPHERE.IOâ„¢
# Licensed MIT.
#
#    https://github.com/sphereio/sphere-node-sdk/blob/master/LICENSE-MIT
*/
var BadRequest, ConcurrentModification, HttpError, InternalServerError, NotFound, ServiceUnavailable, SphereError, Unauthorized,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

HttpError = (function(superClass) {
  extend(HttpError, superClass);

  function HttpError(message, body) {
    this.message = message;
    this.body = body != null ? body : {};
    this.name = "HttpError";
    if (this.body.statusCode) {
      this.code = this.body.statusCode;
    }
    Error.captureStackTrace(this, HttpError);
  }

  return HttpError;

})(Error);

SphereError = (function(superClass) {
  extend(SphereError, superClass);

  function SphereError(message, body) {
    this.message = message;
    this.body = body != null ? body : {};
    this.name = "SphereError";
    if (this.body.statusCode) {
      this.code = this.body.statusCode;
    }
    Error.captureStackTrace(this, SphereError);
  }

  return SphereError;

})(Error);

BadRequest = (function(superClass) {
  extend(BadRequest, superClass);

  function BadRequest(message, body) {
    this.message = message;
    this.body = body != null ? body : {};
    this.name = "BadRequest";
    this.code = 400;
    Error.captureStackTrace(this, BadRequest);
  }

  return BadRequest;

})(SphereError);

Unauthorized = (function(superClass) {
  extend(Unauthorized, superClass);

  function Unauthorized(message, body) {
    this.message = message;
    this.body = body != null ? body : {};
    this.name = "Unauthorized";
    this.code = 401;
    Error.captureStackTrace(this, SphereError);
  }

  return Unauthorized;

})(SphereError);

NotFound = (function(superClass) {
  extend(NotFound, superClass);

  function NotFound(message, body) {
    this.message = message;
    this.body = body != null ? body : {};
    this.name = "NotFound";
    this.code = 404;
    Error.captureStackTrace(this, NotFound);
  }

  return NotFound;

})(SphereError);

ConcurrentModification = (function(superClass) {
  extend(ConcurrentModification, superClass);

  function ConcurrentModification(message, body) {
    this.message = message;
    this.body = body != null ? body : {};
    this.name = "ConcurrentModification";
    this.code = 409;
    Error.captureStackTrace(this, ConcurrentModification);
  }

  return ConcurrentModification;

})(SphereError);

InternalServerError = (function(superClass) {
  extend(InternalServerError, superClass);

  function InternalServerError(message, body) {
    this.message = message;
    this.body = body != null ? body : {};
    this.name = "InternalServerError";
    this.code = 500;
    Error.captureStackTrace(this, InternalServerError);
  }

  return InternalServerError;

})(SphereError);

ServiceUnavailable = (function(superClass) {
  extend(ServiceUnavailable, superClass);

  function ServiceUnavailable(message, body) {
    this.message = message;
    this.body = body != null ? body : {};
    this.name = "ServiceUnavailable";
    this.code = 503;
    Error.captureStackTrace(this, ServiceUnavailable);
  }

  return ServiceUnavailable;

})(SphereError);

module.exports = {
  HttpError: HttpError,
  SphereError: SphereError,
  SphereHttpError: {
    BadRequest: BadRequest,
    Unauthorized: Unauthorized,
    NotFound: NotFound,
    ConcurrentModification: ConcurrentModification,
    InternalServerError: InternalServerError,
    ServiceUnavailable: ServiceUnavailable
  }
};
