var BaseUtils, jsondiffpatch, _;

_ = require('underscore');

jsondiffpatch = require('jsondiffpatch');


/*
Base Utils class
 */

BaseUtils = (function() {
  function BaseUtils() {
    this.diffpatcher = jsondiffpatch.create({
      objectHash: function(obj) {
        return obj._MATCH_CRITERIA || obj.id || obj.name;
      },
      arrays: {
        detectMove: true,
        includeValueOnMove: false
      },
      textDiff: {
        minLength: 300
      }
    });
  }

  BaseUtils.prototype.diff = function(old_obj, new_obj) {
    return this.diffpatcher.diff(old_obj, new_obj);
  };

  BaseUtils.prototype.patch = function(obj, delta) {
    return this.diffpatcher.patch(obj, delta);
  };

  BaseUtils.prototype.getDeltaValue = function(arr, obj) {
    var size;
    if (!_.isArray(arr)) {
      throw new Error('Expected array to extract delta value');
    }
    size = arr.length;
    switch (size) {
      case 1:
        return arr[0];
      case 2:
        return arr[1];
      case 3:
        if (arr[2] === 0) {
          return void 0;
        } else if (arr[2] === 2) {
          if (!obj) {
            throw new Error('Cannot apply patch to long text diff. Missing original object.');
          }
          return jsondiffpatch.patch(obj, arr);
        } else if (arr[2] === 3) {
          throw new Error('Detected an array move, it should not happen as includeValueOnMove should be set to false');
        } else {
          throw new Error("Got unsupported number " + arr[2] + " in delta value");
        }
    }
  };

  return BaseUtils;

})();


/*
Exports object
 */

module.exports = BaseUtils;
