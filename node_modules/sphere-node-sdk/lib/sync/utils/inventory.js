var BaseUtils, InventoryUtils, _,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('underscore');

BaseUtils = require('./base');

InventoryUtils = (function(superClass) {
  extend(InventoryUtils, superClass);

  function InventoryUtils() {
    return InventoryUtils.__super__.constructor.apply(this, arguments);
  }

  InventoryUtils.prototype.actionsMapQuantity = function(diff, old_obj) {
    var a, actions, diffVal, newVal, oldVal;
    actions = [];
    if (diff.quantityOnStock) {
      if (_.isArray(diff.quantityOnStock) && _.size(diff.quantityOnStock) === 2) {
        oldVal = diff.quantityOnStock[0];
        newVal = diff.quantityOnStock[1];
        diffVal = newVal - oldVal;
        a = {
          quantity: Math.abs(diffVal)
        };
        if (diffVal > 0) {
          a.action = 'addQuantity';
          actions.push(a);
        } else if (diffVal < 0) {
          a.action = 'removeQuantity';
          actions.push(a);
        }
      }
    }
    return actions;
  };

  InventoryUtils.prototype.actionsMapExpectedDelivery = function(diff, old_obj) {
    var a, actions, size;
    actions = [];
    if (diff.expectedDelivery) {
      if (_.isArray(diff.expectedDelivery)) {
        size = _.size(diff.expectedDelivery);
        a = {
          action: 'setExpectedDelivery'
        };
        if (size === 1) {
          a.expectedDelivery = diff.expectedDelivery[0];
        } else if (size === 2) {
          a.expectedDelivery = diff.expectedDelivery[1];
        }
        actions.push(a);
      }
    }
    return actions;
  };

  return InventoryUtils;

})(BaseUtils);

module.exports = InventoryUtils;
