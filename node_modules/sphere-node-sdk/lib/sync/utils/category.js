var BaseUtils, CategoryUtils, _, actionsList,
  extend = function(child, parent) { for (var key in parent) { if (hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; },
  hasProp = {}.hasOwnProperty;

_ = require('underscore');

BaseUtils = require('./base');

CategoryUtils = (function(superClass) {
  extend(CategoryUtils, superClass);

  function CategoryUtils() {
    return CategoryUtils.__super__.constructor.apply(this, arguments);
  }

  CategoryUtils.prototype.actionsMap = function(diff, new_obj) {
    var actions;
    actions = [];
    if (diff) {
      _.each(actionsList(), (function(_this) {
        return function(item) {
          var data, key, obj;
          key = item.key;
          obj = diff[key];
          if (obj) {
            data = {
              action: item.action
            };
            if (_.isArray(obj)) {
              data[key] = _this.getDeltaValue(obj);
            } else {
              data[key] = new_obj[key];
            }
            if (!(data.action.match(/^change.*$/) && _.isUndefined(data[key]))) {
              return actions.push(data);
            }
          }
        };
      })(this));
    }
    return actions;
  };

  return CategoryUtils;

})(BaseUtils);

module.exports = CategoryUtils;

actionsList = function() {
  return [
    {
      action: 'changeName',
      key: 'name'
    }, {
      action: 'changeSlug',
      key: 'slug'
    }, {
      action: 'setDescription',
      key: 'description'
    }, {
      action: 'changeParent',
      key: 'parent'
    }, {
      action: 'changeOrderHint',
      key: 'orderHint'
    }, {
      action: 'setExternalId',
      key: 'externalId'
    }, {
      action: 'setMetaTitle',
      key: 'metaTitle'
    }, {
      action: 'setMetaDescription',
      key: 'metaDescription'
    }, {
      action: 'setMetaKeywords',
      key: 'metaKeywords'
    }
  ];
};
