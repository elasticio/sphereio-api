var BaseSync, BaseUtils, debug, _;

debug = require('debug')('sphere-sync');

_ = require('underscore');

BaseUtils = require('./utils/base');


/**
 * Base Sync class, holding common functions. It should be extended for custom logic.
 */

BaseSync = (function() {

  /**
   * @constructor
   * Initialize the class with default values
   */
  function BaseSync() {
    this._data = {};
    this._utils = new BaseUtils;
    this._syncConfig = [];
  }


  /**
   * Save the list of action groups
   * @param  {Array} [opts] A list of action groups for white/black-listing
   * @return {BaseSync} Chained instance of this class
   */

  BaseSync.prototype.config = function(opts) {
    this._syncConfig = opts || [];
    return this;
  };


  /**
   * Build all actions related to the given resource.
   * The actions mapped will be defined by overriding the `_doMapActions` function.
   * @param  {Object} new_obj The JSON object that needs to be updated.
   * @param  {Object} old_obj The JSON object that is used to find differences.
   *                          The resource id/version are read from the old_obj.
   * @return {BaseSync} Chained instance of this class
   * @throws {Error} If new_obj or old_obj are missing
   */

  BaseSync.prototype.buildActions = function(new_obj, old_obj) {
    var actions, diff, update;
    if (!new_obj || !old_obj) {
      throw new Error('Missing either new_obj or old_obj in order to build update actions');
    }
    diff = this._utils.diff(old_obj, new_obj);
    debug('JSON diff for %s Sync: %j', this.constructor.name, diff);
    update = void 0;
    if (diff) {
      actions = this._doMapActions(diff, new_obj, old_obj);
      if (actions.length > 0) {
        update = {
          actions: actions,
          version: old_obj.version
        };
      }
    }
    this._data = {
      update: update,
      updateId: old_obj.id
    };
    debug('JSON data update for %s Sync: %j', this.constructor.name, this._data);
    return this;
  };


  /**
   * Allow to pass a custom function to filter built actions
   * @param  {Function} fn The function used to apply the filtering
   * @return {BaseSync} Chained instance of this class
   */

  BaseSync.prototype.filterActions = function(fn) {
    var filtered;
    if (!fn) {
      return this;
    }
    if (!this._data.update) {
      return this;
    }
    filtered = _.filter(this._data.update.actions, fn);
    if (_.isEmpty(filtered)) {
      this._data.update = void 0;
    } else {
      this._data.update.actions = filtered;
    }
    return this;
  };


  /**
   * Whether it has something to update or not
   * @return {Boolean} True if there are update actions, false if not
   */

  BaseSync.prototype.shouldUpdate = function() {
    return !_.isEmpty(this._data.update);
  };


  /**
   * Retrieve the resource id that needs to be updated (taken from old_obj)
   * @return {String} The resource id
   */

  BaseSync.prototype.getUpdateId = function() {
    var _ref;
    return (_ref = this._data) != null ? _ref.updateId : void 0;
  };


  /**
   * Retrieve the actions that needs to be updated
   * @return {Array} The list of actions, or empty if there are none
   */

  BaseSync.prototype.getUpdateActions = function() {
    var _ref, _ref1;
    return ((_ref = this._data) != null ? (_ref1 = _ref.update) != null ? _ref1.actions : void 0 : void 0) || [];
  };


  /**
   * Retrieve the update payload containing the actions list and version
   * @return {Object} The update payload as JSON
   */

  BaseSync.prototype.getUpdatePayload = function() {
    var _ref;
    return (_ref = this._data) != null ? _ref.update : void 0;
  };


  /**
   * @private
   * Whether to map or not to map actions defined in config.
   * This concept can be expressed in terms of blacklisting and whitelisting.
   * @param  {String} type The action type (see documentation for a detailed list)
   * @param  {Function} fn The function that builds the related action if whitelisted, otherwise an empty Array
   * @return {Array} The built list of actions or an empty array if blacklisted
   */

  BaseSync.prototype._mapActionOrNot = function(type, fn) {
    var found;
    if (_.isEmpty(this._syncConfig)) {
      return fn();
    }
    found = _.find(this._syncConfig, function(c) {
      return c.type === type;
    });
    if (!found) {
      return [];
    }
    switch (found.group) {
      case 'black':
        return [];
      case 'white':
        return fn();
      default:
        throw new Error("Action group '" + found.group + "' not supported. Please use black or white.");
    }
  };


  /**
   * @private
   * Function to be overriden for mapping specific resource actions
   * @param  {Object} diff The JSON diff object.
   * @param  {Object} new_obj The JSON object that needs to be updated.
   * @param  {Object} old_obj The JSON object that is used to find differences.
   * @return {Array} The list of built actions
   */

  BaseSync.prototype._doMapActions = function(diff, new_obj, old_obj) {
    return [];
  };

  return BaseSync;

})();

module.exports = BaseSync;
