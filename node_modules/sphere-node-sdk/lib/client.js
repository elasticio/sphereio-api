/* ===========================================================
# sphere-node-sdk - v1.6.0
# ==============================================================
# Copyright (c) 2015 SPHERE.IOâ„¢
# Licensed MIT.
#
#    https://github.com/sphereio/sphere-node-sdk/blob/master/LICENSE-MIT
*/
var ALL_SERVICES, CartDiscountService, CartService, CategoryService, ChannelService, CustomObjectService, CustomerGroupService, CustomerService, DiscountCodeService, InventoryEntryService, MessageService, OrderService, PaymentService, ProductDiscountService, ProductProjectionService, ProductService, ProductTypeService, ProjectService, Rest, ReviewService, ShippingMethodService, SphereClient, StateService, TaskQueue, TaxCategoryService, ZoneService, _;

_ = require('underscore');

Rest = require('./connect/rest');

TaskQueue = require('./task-queue');

CartDiscountService = require('./services/cart-discounts');

CartService = require('./services/carts');

CategoryService = require('./services/categories');

ChannelService = require('./services/channels');

CustomObjectService = require('./services/custom-objects');

CustomerService = require('./services/customers');

CustomerGroupService = require('./services/customer-groups');

DiscountCodeService = require('./services/discount-codes');

InventoryEntryService = require('./services/inventory-entries');

MessageService = require('./services/messages');

OrderService = require('./services/orders');

PaymentService = require('./services/payments');

ProductDiscountService = require('./services/product-discounts');

ProductService = require('./services/products');

ProductProjectionService = require('./services/product-projections');

ProductTypeService = require('./services/product-types');

ProjectService = require('./services/project');

ReviewService = require('./services/reviews');

ShippingMethodService = require('./services/shipping-methods');

StateService = require('./services/states');

TaxCategoryService = require('./services/tax-categories');

ZoneService = require('./services/zones');

ALL_SERVICES = [
  {
    key: 'cartDiscounts',
    name: CartDiscountService
  }, {
    key: 'carts',
    name: CartService
  }, {
    key: 'categories',
    name: CategoryService
  }, {
    key: 'channels',
    name: ChannelService
  }, {
    key: 'customObjects',
    name: CustomObjectService
  }, {
    key: 'customers',
    name: CustomerService
  }, {
    key: 'customerGroups',
    name: CustomerGroupService
  }, {
    key: 'discountCodes',
    name: DiscountCodeService
  }, {
    key: 'inventoryEntries',
    name: InventoryEntryService
  }, {
    key: 'messages',
    name: MessageService
  }, {
    key: 'orders',
    name: OrderService
  }, {
    key: 'payments',
    name: PaymentService
  }, {
    key: 'products',
    name: ProductService
  }, {
    key: 'productDiscounts',
    name: ProductDiscountService
  }, {
    key: 'productProjections',
    name: ProductProjectionService
  }, {
    key: 'productTypes',
    name: ProductTypeService
  }, {
    key: 'project',
    name: ProjectService
  }, {
    key: 'reviews',
    name: ReviewService
  }, {
    key: 'shippingMethods',
    name: ShippingMethodService
  }, {
    key: 'states',
    name: StateService
  }, {
    key: 'taxCategories',
    name: TaxCategoryService
  }, {
    key: 'zones',
    name: ZoneService
  }
];

SphereClient = (function() {
  function SphereClient(options) {
    var _serviceOptions;
    if (options == null) {
      options = {};
    }
    this._task = options.task || new TaskQueue;
    this._rest = options.rest || new Rest(_.defaults(options, {
      user_agent: 'sphere-node-sdk'
    }));
    _serviceOptions = {
      _rest: this._rest,
      _task: this._task,
      _stats: _.defaults(options.stats || {}, {
        includeHeaders: false
      })
    };
    ALL_SERVICES.forEach((function(_this) {
      return function(service) {
        return _this[service.key] = new service.name(_serviceOptions);
      };
    })(this));
  }

  SphereClient.prototype.setMaxParallel = function(maxParallel) {
    return this._task.setMaxParallel(maxParallel);
  };

  return SphereClient;

})();

module.exports = SphereClient;
