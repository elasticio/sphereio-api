var OAuth2, Rest, _, debug, request;

debug = require('debug')('sphere-connect:rest');

_ = require('underscore');

_.mixin(require('underscore-mixins'));

request = require('request');

OAuth2 = require('./oauth2');

Rest = (function() {
  function Rest(opts) {
    var config, oauth_options, rejectUnauthorized, userAgent;
    if (opts == null) {
      opts = {};
    }
    config = opts.config;
    if (!config) {
      throw new Error('Missing credentials');
    }
    if (!config.client_id) {
      throw new Error('Missing \'client_id\'');
    }
    if (!config.client_secret) {
      throw new Error('Missing \'client_secret\'');
    }
    if (!config.project_key) {
      throw new Error('Missing \'project_key\'');
    }
    rejectUnauthorized = _.isUndefined(opts.rejectUnauthorized) ? true : opts.rejectUnauthorized;
    userAgent = _.isUndefined(opts.user_agent) ? 'sphere-node-connect' : opts.user_agent;
    this._options = {
      config: config,
      host: opts.host || 'api.sphere.io',
      access_token: opts.access_token || void 0,
      timeout: opts.timeout || 20000,
      rejectUnauthorized: rejectUnauthorized,
      headers: {
        'User-Agent': userAgent
      }
    };
    this._options.uri = "https://" + this._options.host + "/" + this._options.config.project_key;
    oauth_options = _.deepClone(opts);
    _.extend(oauth_options, {
      host: opts.oauth_host
    });
    this._oauth = new OAuth2(oauth_options);
    if (this._options.access_token) {
      this._options.headers['Authorization'] = "Bearer " + this._options.access_token;
    }
    debug('rest options: %j', this._options);
    return;
  }

  Rest.prototype.GET = function(resource, callback) {
    var params;
    params = {
      method: 'GET',
      resource: resource
    };
    debug('GET request params: %j', _.extend({}, params, {
      project: this._options.config.project_key
    }));
    return this._preRequest(params, callback);
  };

  Rest.prototype.POST = function(resource, payload, callback) {
    var params;
    params = {
      method: 'POST',
      resource: resource,
      body: payload
    };
    debug('POST request params: %j', _.extend({}, params, {
      project: this._options.config.project_key
    }));
    return this._preRequest(params, callback);
  };

  Rest.prototype.DELETE = function(resource, callback) {
    var params;
    params = {
      method: 'DELETE',
      resource: resource
    };
    debug('DELETE request params: %j', _.extend({}, params, {
      project: this._options.config.project_key
    }));
    return this._preRequest(params, callback);
  };

  Rest.prototype.PUT = function() {
    throw new Error('Not implemented yet');
  };

  Rest.prototype._preRequest = function(params, callback) {
    var _req;
    _req = (function(_this) {
      return function(retry) {
        var request_options;
        if (!_this._options.access_token) {
          return _this._oauth.getAccessToken(function(error, response, body) {
            var access_token;
            if (error) {
              if (retry === 10) {
                callback(error, response, body);
              } else {
                debug("Failed to retrieve access_token (error: %j), retrying..." + (retry + 1), error);
                return _req(retry + 1);
              }
            }
            if (response.statusCode !== 200) {
              if (retry === 10) {
                return callback(error, response, body);
              } else {
                debug("Failed to retrieve access_token (statusCode: " + response.statusCode + "), retrying..." + (retry + 1));
                return _req(retry + 1);
              }
            } else {
              access_token = body.access_token;
              _this._options.access_token = access_token;
              _this._options.headers['Authorization'] = "Bearer " + _this._options.access_token;
              debug('new access_token received: %s', access_token);
              return _req(0);
            }
          });
        } else {
          request_options = {
            uri: "" + _this._options.uri + params.resource,
            json: true,
            method: params.method,
            host: _this._options.host,
            headers: _this._options.headers,
            timeout: _this._options.timeout,
            rejectUnauthorized: _this._options.rejectUnauthorized
          };
          if (params.body) {
            request_options.body = params.body;
          }
          debug('rest request options: %j', request_options);
          return _this._doRequest(request_options, callback);
        }
      };
    })(this);
    return _req(0);
  };

  Rest.prototype._doRequest = function(options, callback) {
    return request(options, function(e, r, b) {
      if (e) {
        debug('error on request: %j', e);
      }
      return callback(e, r, b);
    });
  };

  Rest.prototype.PAGED = function(resource, resolve) {
    var _page, endpoint, limit, params, query, splitted;
    splitted = resource.split('?');
    endpoint = splitted[0];
    query = _.parseQuery(splitted[1]);
    if (query.limit && query.limit !== '0') {
      throw new Error('Query limit doesn\'t seem to be 0. This function queries all results, are you sure you want to use this?');
    }
    params = _.extend({}, query, {
      limit: 50
    });
    limit = params.limit;
    debug('PAGED request params: %j', params);
    _page = (function(_this) {
      return function(lastId, accumulator) {
        var lastIdPredicate, queryParams, wherePredicate;
        if (accumulator == null) {
          accumulator = [];
        }
        debug('PAGED iteration (lastId: %s)', lastId);
        wherePredicate = params.where ? {
          where: params.where
        } : {};
        if (lastId) {
          lastIdPredicate = encodeURIComponent("id > \"" + lastId + "\"");
          wherePredicate = {
            where: params.where ? params.where + "%20and%20" + lastIdPredicate : lastIdPredicate
          };
        }
        debug('PAGED where predicate: %j', wherePredicate);
        queryParams = _.stringifyQuery(_.extend({}, params, {
          sort: encodeURIComponent('id asc'),
          limit: limit,
          withTotal: false
        }, wherePredicate));
        return _this.GET(endpoint + "?" + queryParams, function(error, response, body) {
          var acc, last, newLastId;
          if (error) {
            return resolve(error, response, body);
          } else {
            if (response.statusCode === 200) {
              debug('PAGED response: offset %s, count %s', body.offset, body.count);
              acc = accumulator.concat(body.results);
              if (_.size(body.results) < limit) {
                return resolve(null, response, {
                  count: body.total,
                  offset: body.offset,
                  total: _.size(acc),
                  results: acc
                });
              } else {
                last = _.last(body.results);
                newLastId = last && last.id;
                return _page(newLastId, acc);
              }
            } else {
              return resolve(error, response, body);
            }
          }
        });
      };
    })(this);
    _page();
  };

  return Rest;

})();

module.exports = Rest;
