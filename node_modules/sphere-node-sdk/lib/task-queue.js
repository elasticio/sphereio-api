/* ===========================================================
# sphere-node-sdk - v1.2.0
# ==============================================================
# Copyright (c) 2014 SPHERE.IOâ„¢
# Licensed MIT.
#
#    https://github.com/sphereio/sphere-node-sdk/blob/master/LICENSE-MIT
*/
var Promise, TaskQueue, _;

_ = require('underscore');

Promise = require('bluebird');


/**
 * Creates a new TaskQueue instance
 * @class TaskQueue
 */

TaskQueue = (function() {

  /**
   * Initialize the class
   * @constructor
   * @param {Object} [opts] A JSON object containg configuration options
   */
  function TaskQueue(opts) {
    var maxParallel;
    if (opts == null) {
      opts = {};
    }
    maxParallel = opts.maxParallel;
    this.setMaxParallel(maxParallel);
    this._queue = [];
    this._activeCount = 0;
  }


  /**
   * Set the maxParallel parameter with a custom number.
   * @param {Number} maxParallel A number between 1 and 100 (default 20)
   * @throws {Error} If number < 1 or > 100
   */

  TaskQueue.prototype.setMaxParallel = function(maxParallel) {
    if (maxParallel == null) {
      maxParallel = 20;
    }
    if (_.isNumber(maxParallel) && (maxParallel < 1 || maxParallel > 100)) {
      throw new Error('MaxParallel must be a number between 1 and 100');
    }
    return this._maxParallel = maxParallel;
  };


  /**
   * Add a new Task to the queue
   * @param {Function} taskFn A {Promise} that will be resolved once the task is executed
   * @return {Promise} A promise, fulfilled with an {Object} or rejected with an error
   */

  TaskQueue.prototype.addTask = function(taskFn) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        _this._queue.push({
          fn: taskFn,
          resolve: resolve,
          reject: reject
        });
        return _this._maybeExecute();
      };
    })(this));
  };


  /**
   * @private
   * Start a task by resolving its {Promise}
   * @param {Object} task A Task object containing a function and a deferred
   */

  TaskQueue.prototype._startTask = function(task) {
    this._activeCount += 1;
    return task.fn().then(function(res) {
      return task.resolve(res);
    })["catch"](function(error) {
      return task.reject(error);
    })["finally"]((function(_this) {
      return function() {
        _this._activeCount -= 1;
        return _this._maybeExecute();
      };
    })(this)).done();
  };


  /**
   * @private
   * Will recursively check if a new task should be triggered
   */

  TaskQueue.prototype._maybeExecute = function() {
    if (this._activeCount < this._maxParallel && this._queue.length > 0) {
      this._startTask(this._queue.shift());
      return this._maybeExecute();
    }
  };

  return TaskQueue;

})();

module.exports = TaskQueue;
