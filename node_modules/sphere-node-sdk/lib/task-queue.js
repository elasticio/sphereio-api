/* ===========================================================
# sphere-node-sdk - v1.3.5
# ==============================================================
# Copyright (c) 2015 SPHERE.IOâ„¢
# Licensed MIT.
#
#    https://github.com/sphereio/sphere-node-sdk/blob/master/LICENSE-MIT
*/
var Promise, TaskQueue, _;

_ = require('underscore');

Promise = require('bluebird');

TaskQueue = (function() {
  function TaskQueue(options) {
    var maxParallel;
    if (options == null) {
      options = {};
    }
    maxParallel = options.maxParallel;
    this.setMaxParallel(maxParallel);
    this._queue = [];
    this._activeCount = 0;
  }

  TaskQueue.prototype.setMaxParallel = function(maxParallel) {
    if (maxParallel == null) {
      maxParallel = 20;
    }
    if (_.isNumber(maxParallel) && (maxParallel < 1 || maxParallel > 100)) {
      throw new Error('MaxParallel must be a number between 1 and 100');
    }
    return this._maxParallel = maxParallel;
  };

  TaskQueue.prototype.addTask = function(taskFn) {
    return new Promise((function(_this) {
      return function(resolve, reject) {
        _this._queue.push({
          fn: taskFn,
          resolve: resolve,
          reject: reject
        });
        return _this._maybeExecute();
      };
    })(this));
  };

  TaskQueue.prototype._startTask = function(task) {
    this._activeCount += 1;
    return task.fn().then(function(res) {
      return task.resolve(res);
    })["catch"](function(error) {
      return task.reject(error);
    })["finally"]((function(_this) {
      return function() {
        _this._activeCount -= 1;
        return _this._maybeExecute();
      };
    })(this)).done();
  };

  TaskQueue.prototype._maybeExecute = function() {
    if (this._activeCount < this._maxParallel && this._queue.length > 0) {
      this._startTask(this._queue.shift());
      return this._maybeExecute();
    }
  };

  return TaskQueue;

})();

module.exports = TaskQueue;
