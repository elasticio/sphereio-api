{
  "name": "sphere-node-connect",
  "description": "Quick and easy way to connect your Node.js app with SPHERE.IO.",
  "version": "0.5.6",
  "keywords": [
    "sphere",
    "api",
    "connect",
    "oauth",
    "oauth2"
  ],
  "homepage": "https://github.com/sphereio/sphere-node-connect",
  "author": {
    "name": "Nicola Molinari",
    "email": "nicola.molinari@commercetools.de"
  },
  "repository": {
    "type": "git",
    "url": "https://github.com/sphereio/sphere-node-connect.git"
  },
  "bugs": {
    "url": "https://github.com/sphereio/sphere-node-connect/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sphereio/sphere-node-connect/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/main",
  "engines": {
    "node": ">= 0.8.0"
  },
  "scripts": {
    "build": "grunt build",
    "postpublish": "rm -rf lib",
    "test": "grunt coverage"
  },
  "dependencies": {
    "request": "~2.34.0",
    "underscore": "~1.6.0",
    "sphere-node-utils": "~0.4.1"
  },
  "devDependencies": {
    "coveralls": "~2.10.0",
    "grunt": "~0.4.4",
    "grunt-bump": "~0.0.13",
    "grunt-coffeelint": "~0.0.8",
    "grunt-contrib-clean": "~0.5.0",
    "grunt-contrib-coffee": "~0.10.1",
    "grunt-contrib-concat": "~0.4.0",
    "grunt-contrib-watch": "~0.6.1",
    "grunt-shell": "~0.6.4",
    "istanbul": "~0.2.4",
    "jasmine-node": "~1.13.1",
    "sphere-coffeelint": "git://github.com/sphereio/sphere-coffeelint.git#master"
  },
  "readme": "![SPHERE.IO icon](https://admin.sphere.io/assets/images/sphere_logo_rgb_long.png)\n\n# Node.js Connect\n\n[![NPM](https://nodei.co/npm/sphere-node-connect.png?downloads=true)](https://www.npmjs.org/package/sphere-node-connect)\n\n[![Build Status](https://secure.travis-ci.org/sphereio/sphere-node-connect.png?branch=master)](http://travis-ci.org/sphereio/sphere-node-connect) [![NPM version](https://badge.fury.io/js/sphere-node-connect.png)](http://badge.fury.io/js/sphere-node-connect) [![Coverage Status](https://coveralls.io/repos/sphereio/sphere-node-connect/badge.png?branch=master)](https://coveralls.io/r/sphereio/sphere-node-connect?branch=master) [![Dependency Status](https://david-dm.org/sphereio/sphere-node-connect.png?theme=shields.io)](https://david-dm.org/sphereio/sphere-node-connect) [![devDependency Status](https://david-dm.org/sphereio/sphere-node-connect/dev-status.png?theme=shields.io)](https://david-dm.org/sphereio/sphere-node-connect#info=devDependencies)\n\nQuick and easy way to connect your Node.js app with [SPHERE.IO](http://sphere.io) HTTP APIs.\n\n## Table of Contents\n* [Getting Started](#getting-started)\n* [Documentation](#documentation)\n  * [OAuth2](#oauth2)\n  * [Rest](#rest)\n    * [Paged requests](#paged-requests)\n  * [Error handling](#error-handling)\n* [Examples](#examples)\n* [Contributing](#contributing)\n* [Releasing](#releasing)\n* [Styleguide](#styleguide)\n* [License](#license)\n\n\n## Getting Started\nInstall the module with: `npm install sphere-node-connect`\n\n```coffeescript\nsphere_connect = require 'sphere-node-connect'\n# handles OAuth2 request to retrieve an access_token\nOAuth2 = sphere_connect.OAuth2\n# handles requests to HTTP APIs\nRest = sphere_connect.Rest\n\n# or simpler\n{OAuth2, Rest} = require 'sphere-node-connect'\n```\n\n## Documentation\nThe connector exposes 2 objects: `OAuth2` and `Rest`.\n\n### OAuth2\n\nThe `OAuth2` is used to retrieve an `access_token`\n\n```coffeescript\noa = new OAuth2\n  config:\n    client_id: ''\n    client_secret: ''\n    project_key: ''\n  host: 'auth.sphere.io' # optional\n  accessTokenUrl: '/oauth/token' # optional\n  timeout: 20000 # optional\n  rejectUnauthorized: true # optional\n  logConfig: {} # optional (see `Logging` section)\n\noa.getAccessToken (error, response, body) -> # do something\n```\n\n### Rest\n\nThe `Rest` is used to comunicate with the HTTP API.\n\n```coffeescript\nrest = new Rest\n  config:\n    client_id: ''\n    client_secret: ''\n    project_key: ''\n  host: 'api.sphere.io' # optional\n  access_token: '' # optional (if not provided it will automatically retrieve an `access_token`)\n  timeout: 20000 # optional\n  rejectUnauthorized: true # optional\n  oauth_host: 'auth.sphere.io' # optional (used when retrieving the `access_token` internally)\n  user_agent: 'my client v0.1' # optional\n  logConfig: {} # optional (see `Logging` section)\n\nrest.GET resource, (error, response, body) -> # do something\nrest.POST resource, payload, (error, response, body) -> # do something\nrest.DELETE resource, (error, response, body) -> # do something\nrest.PAGEd resource, (error, response, body) -> # (see `Paged requests` section)\n```\n\n> The `Rest` object, when instantiated, has an internal instance of the `OAuth` module accessible with `rest._oauth`. This is mainly used internally to automatically retrieve an `access_token`.\n\nCurrently `GET`, `POST` and `DELETE` are supported.\n\n#### Paged requests\nPaged results (when querying an endpoint) can be processed in chunks, to avoid the server to return big amount of data all together.\nThe `PAGED` function recursively accumulates the paged results, returning all of them at once.\n\n> Use this function to safely query all results (=> `limit=0`)\n\n```coffeescript\nrest = new Rest options\n\nrest.PAGED '/products', (error, response, body) ->\n  # do something\n```\n\n> Note that by using this function, the `limit` is considered to be 0, meaning all results are queried. So given `limit` and `offset` parameters will be ignored.\n\n```coffeescript\n# with query params\nrest = new Rest options\n\nrest.PAGED '/products?where=name%3D%22Foo%22&staged=true', (error, response, body) ->\n  # do something\n```\n\nYou can also subscribe to **progress notifications**\n\n```coffeescript\nrest = new Rest options\n\nrest.PAGED '/products', (error, response, body) ->\n  # do something\n, (progress) ->\n  # progress is an object containing the current progress percentage\n  # and the value of the current results (array)\n  # {percentage: 20, value: [r1, r2, r3, ...]}\n```\n\n### Error handling\nSince the connector is basically a wrapper of the [`request`](https://github.com/mikeal/request#requestoptions-callback) HTTP Client, the `callback` function comes directly from there, meaning that the 3 arguments are the same:\n\n- `error`: an error object when applicable (usually from [`http.ClientRequest`](http://nodejs.org/api/http.html#http_class_http_clientrequest) object) otherwise `null`\n- `response`: an [`http.IncomingMessage`](http://nodejs.org/api/http.html#http_http_incomingmessage) object containing all kind of information about the request / response\n- `body`: a JSON object (automatically parsed)\n\nAs the SPHERE.IO [HTTP API](http://commercetools.de/dev/http-api.html) returns JSON responses either with resources or [error messages](http://commercetools.de/dev/http-api-projects-errors.html), the application should check the response `statusCode` and decide what to do.\nIt's always a good practice to check first for the existence of an `error` object in case there was a problem with the http client request.\n\n```coffeescript\n(error, response, body) ->\n  if error\n    # do something\n  else\n    if response.statusCode is 200\n      # ok\n    else\n      # do something else\n```\n\n### Logging\n\nSee [`sphere-node-utils`](https://github.com/sphereio/sphere-node-utils)\n\n\n## Examples\n\n```coffeescript\noa.getAccessToken (error, response, body) ->\n  if response.statusCode is 200\n    access_token = body.access_token\n  else\n    throw new Error 'Failed to get Access Token.'\n```\n\n```coffeescript\n# Get a list of all products\nrest.GET '/products', (error, response, body) -> console.log(body)\n\n# Create a new product\nrest.POST '/products',\n  name: { en: 'Foo' }\n  slug: { en: 'foo' }\n  productType: { id: '123', typeId: 'product-type' }\n, (error, response, body) -> console.log(body)\n\n# Update a product\nrest.POST '/products/123',\n  version: 1\n  actions: [\n    { action: 'changeName', name: { en: 'Boo' } }\n  ]\n, (error, response, body) -> console.log(body)\n\n# Delete a product\nrest.DELETE '/product/abc?version=3', (error, response, body) ->\n  if response.statusCode is 200\n    console.log 'Product successfully deleted.'\n  else if response.statusCode is 404\n    console.log 'Product does not exist.'\n  else if response.statusCode == 400\n    console.log 'Product version does not match.'\n```\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\n\nDefine your SPHERE.IO credentials into a `config.js`. Since the tests run against 2 projects on different environments you need to provide the credentials for both. If you just have one project You can provide the same credentials for both.\n\n```javascript\n/* SPHERE.IO credentials */\nexports.config = {\n  staging: {\n    client_id: \"\",\n    client_secret: \"\",\n    project_key: \"\",\n    oauth_host: \"auth.sphere.io\",\n    api_host: \"api.sphere.io\"\n  },\n  prod: {\n    client_id: \"\",\n    client_secret: \"\",\n    project_key: \"\",\n    oauth_host: \"auth.sphere.io\",\n    api_host: \"api.sphere.io\"\n  }\n}\n```\n\n## Releasing\nReleasing a new version is completely automated using the Grunt task `grunt release`.\n\n```javascript\ngrunt release // patch release\ngrunt release:minor // minor release\ngrunt release:major // major release\n```\n\n## Styleguide\nWe <3 CoffeeScript! So please have a look at this referenced [coffeescript styleguide](https://github.com/polarmobile/coffeescript-style-guide) when doing changes to the code.\n\n## License\nCopyright (c) 2013 Nicola Molinari\nLicensed under the MIT license.\n",
  "readmeFilename": "README.md",
  "_id": "sphere-node-connect@0.5.6",
  "_from": "sphere-node-connect@0.5.6"
}
