{
  "name": "sphere-node-utils",
  "description": "Helpers to share among all SPHERE.IO node components.",
  "version": "0.4.12",
  "homepage": "https://github.com/sphereio/sphere-node-utils",
  "private": false,
  "author": {
    "name": "Hajo Eichler",
    "email": "hajo.eichler@commercetools.com",
    "url": "http://dev.sphere.io"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/sphereio/sphere-node-utils.git"
  },
  "bugs": {
    "url": "https://github.com/sphereio/sphere-node-utils/issues"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/sphereio/sphere-node-utils/blob/master/LICENSE-MIT"
    }
  ],
  "main": "./lib/main",
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "build": "grunt build",
    "postpublish": "rm -rf lib",
    "test": "grunt coverage"
  },
  "dependencies": {
    "bunyan": "1.0.0",
    "q": "1.0.x",
    "q-io": "1.11.x",
    "ssh2": "0.2.21",
    "underscore": "1.6.0",
    "underscore.string": "2.3.3",
    "csv": "0.3.7"
  },
  "devDependencies": {
    "coveralls": "2.10.0",
    "grunt": "0.4.4",
    "grunt-bump": "0.0.13",
    "grunt-coffeelint": "0.0.8",
    "grunt-contrib-clean": "0.5.0",
    "grunt-contrib-coffee": "0.10.1",
    "grunt-contrib-concat": "0.4.0",
    "grunt-contrib-watch": "0.6.1",
    "grunt-shell": "0.7.0",
    "istanbul": "0.2.7",
    "jasmine-node": "1.13.1",
    "sphere-coffeelint": "sphereio/sphere-coffeelint.git#master"
  },
  "keywords": [],
  "readme": "![SPHERE.IO icon](https://admin.sphere.io/assets/images/sphere_logo_rgb_long.png)\n\n# Node.js Utils\n\n[![NPM](https://nodei.co/npm/sphere-node-utils.png?downloads=true)](https://www.npmjs.org/package/sphere-node-utils)\n\n[![Build Status](https://secure.travis-ci.org/sphereio/sphere-node-utils.png?branch=master)](http://travis-ci.org/sphereio/sphere-node-utils) [![NPM version](https://badge.fury.io/js/sphere-node-utils.png)](http://badge.fury.io/js/sphere-node-utils) [![Coverage Status](https://coveralls.io/repos/sphereio/sphere-node-utils/badge.png)](https://coveralls.io/r/sphereio/sphere-node-utils) [![Dependency Status](https://david-dm.org/sphereio/sphere-node-utils.png?theme=shields.io)](https://david-dm.org/sphereio/sphere-node-utils) [![devDependency Status](https://david-dm.org/sphereio/sphere-node-utils/dev-status.png?theme=shields.io)](https://david-dm.org/sphereio/sphere-node-utils#info=devDependencies)\n\nThis module shares helpers among all [SPHERE.IO](http://sphere.io/) Node.js components.\n\n## Table of Contents\n* [Getting Started](#getting-started)\n* [Documentation](#documentation)\n  * [Helpers](#helpers)\n    * [Logger](#logger)\n    * [ExtendedLogger](#extendedlogger)\n    * [TaskQueue](#taskqueue)\n    * [Sftp](#sftp)\n    * [ProjectCredentialsConfig](#projectcredentialsconfig)\n    * [Repeater](#repeater)\n    * [ElasticIo](#elasticio)\n  * [Mixins](#mixins)\n    * [Qutils](#qutils)\n    * [Underscore](#underscore)\n      * [_.deepClone](#_deepclone)\n      * [_.prettify](#_prettify)\n      * [_.percentage](#_percentage)\n      * [_.stringifyQuery](#_stringifyquery)\n      * [_.parseQuery](#_parsequery)\n* [Examples](#examples)\n* [Releasing](#releasing)\n* [License](#license)\n\n\n## Getting Started\n\n```coffeescript\nSphereUtils = require 'sphere-node-utils'\nLogger = SphereUtils.Logger\nTaskQueue = SphereUtils.TaskQueue\nSftp = SphereUtils.Sftp\nProjectCredentialsConfig = SphereUtils.ProjectCredentialsConfig\nElasticIo = SphereUtils.ElasticIo\n_u = SphereUtils._u\n\n# or\n{Logger, TaskQueue, Sftp, ProjectCredentialsConfig, ElasticIo, _u} = require 'sphere-node-utils'\n```\n\n## Documentation\n\n### Helpers\nCurrently following helpers are provided by `SphereUtils`:\n\n- `Logger`\n- `TaskQueue`\n- `Sftp`\n- `ProjectCredentialsConfig`\n- `ElasticIo`\n- `Repeater`\n\n#### Logger\nLogging is supported by the lightweight JSON logging module called [Bunyan](https://github.com/trentm/node-bunyan).\n\nThe `Logger` can be configured with following options\n```coffeescript\nlogConfig:\n  levelStream: 'info' # log level for stdout stream\n  levelFile: 'debug' # log level for file stream\n  path: './sphere-node-utils-debug.log' # where to write the file stream\n  name: 'sphere-node-utils' # name of the application\n  serializers:\n    request: reqSerializer # function that maps the request object with fields (uri, method, headers)\n    response: resSerializer # function that maps the response object with fields (status, headers, body)\n  src: false # includes a log of the call source location (file, line, function).\n             # Determining the source call is slow, therefor it's recommended not to enable this on production.\n  silent: false # don't instantiate the {Bunyan} logger, instead use `console`\n  streams: [ # a list of streams that defines the type of output for log messages\n    {level: 'info', stream: process.stdout}\n    {level: 'debug', path: './sphere-node-utils-debug.log'}\n  ]\n```\n\n> A `Logger` instance should be extended by the component that needs logging by providing the correct configuration\n\n```coffeescript\n{Logger} = require 'sphere-node-utils'\n\nmodule.exports = class extends Logger\n\n  # we can override here some of the configuration options\n  @appName: 'my-application-name'\n  @path: './my-application-name.log'\n```\n\nA `Bunyan` logger can also be created from another existing logger. This is useful to connect sub-components of the same application by sharing the same configuration.\nThis concept is called **[child logger](https://github.com/trentm/node-bunyan#logchild)**.\n\n```coffeescript\n{Logger} = require 'sphere-node-utils'\nclass MyCustomLogger extends Logger\n  @appName: 'my-application-name'\n\nmyLogger = new MyCustomLogger logConfig\n\n# assume we have a component which already implements logging\nappWithLogger = new AppWithLogger\n  logConfig:\n    logger: myLogger\n\n# now we can use `myLogger` to log and everything logged from the child logger of `AppWithLogger`\n# will be logged with a `widget_type` field, meaning the log comes from the child logger\n```\n\nOnce you configure your logger, you will get JSON stream of logs based on the level you defined. This is great for processing, but not for really human-friendly.\nThis is where the `bunyan` command-line tool comes in handy, by providing **pretty-printed** logs and **filtering**. More info [here](https://github.com/trentm/node-bunyan#cli-usage).\n\n```bash\n# examples\n\n# this will output the content of the log file in a `short` format\nbunyan sphere-node-connect-debug.log -o short\n00:31:47.760Z  INFO sphere-node-connect: Retrieving access_token...\n00:31:48.232Z  INFO sphere-node-connect: GET /products\n\n# directly pipe the stdout stream\njasmine-node --verbose --captureExceptions test | ./node_modules/bunyan/bin/bunyan -o short\n00:34:03.936Z DEBUG sphere-node-connect: OAuth constructor initialized. (host=auth.sphere.io, accessTokenUrl=/oauth/token, timeout=20000, rejectUnauthorized=true)\n    config: {\n      \"client_id\": \"S6AD07quPeeTfRoOHXdTx2NZ\",\n      \"client_secret\": \"7d3xSWTN5jQJNpnRnMLd4qICmfahGPka\",\n      \"project_key\": \"my-project\",\n      \"oauth_host\": \"auth.sphere.io\",\n      \"api_host\": \"api.sphere.io\"\n    }\n00:34:03.933Z DEBUG sphere-node-connect: Failed to retrieve access_token, retrying...1\n\n```\n\n##### Silent logs, use `console`\nYou can pass a `silent` flag to override the level functions of the `bunyan` logger (debug, info, ...) to print to stdout / stderr using console.\n\n#### ExtendedLogger\nAn `ExtendedLogger` allows you to wrap additional fields to the logged JSON object, by either defining them on class instantiation or by chaining them before calling the log level method.\n\n> Under the hood it uses the [Logger](#logger) `Bunyan` object\n\n```coffeescript\nlogger = new ExtendedLogger\n  additionalFields:\n    project_key: 'foo'\n    another_field: 'bar'\n  logConfig: # see config above (Logger)\n    streams: [\n      { level: 'info', stream: process.stdout }\n    ]\n\n# then use the logger as usual\n\nlogger.info {id: 123}, 'Hello world'\n# => {\"name\":\"sphere-node-utils\",\"hostname\":\"Nicolas-MacBook-Pro.local\",\"pid\":25856,\"level\":30,\"id\":123,\"project_key\":\"foo\",\"another_field\":\"bar\",\"msg\":\"Hello world\",\"time\":\"2014-04-17T10:54:05.237Z\",\"v\":0}\n\n# or by chaining\n\nlogger.withField({token: 'qwerty'}).info {id: 123}, 'Hello world'\n# => {\"name\":\"sphere-node-utils\",\"hostname\":\"Nicolas-MacBook-Pro.local\",\"pid\":25856,\"level\":30,\"id\":123,\"project_key\":\"foo\",\"another_field\":\"bar\", \"token\": \"qwerty\",\"msg\":\"Hello world\",\"time\":\"2014-04-17T10:54:05.237Z\",\"v\":0}\n```\n\n#### TaskQueue\nA `TaskQueue` allows you to queue promises (or function that return promises) which will be executed in parallel sequentially, meaning that new tasks will not be triggered until the previous ones are resolved.\n\n```coffeescript\n{TaskQueue} = require 'sphere-node-utils'\n\ncallMe = ->\n  d = Q.defer()\n  setTimeout ->\n    d.resolve true\n  , 5000\n  d.promise\ntask = new TaskQueue maxParallel: 50 # default 20\ntask.addTask callMe\n.then (result) -> # result == true\n.fail (error) ->\n```\n\nAvailable methods:\n- `setMaxParallel` sets the `maxParallel` parameter (default is `20`). **If < 1 or > 100 it throws an error**\n- `addTask` adds a task (promise) to the queue and returns a new promise\n\n#### Sftp\nProvides promised based wrapped functionalities for some `SFTP` methods\n\n- `listFiles` TBD\n- `stats` TBD\n- `readFile` _not implemented yet_\n- `saveFile` _not implemented yet_\n- `getFile` TBD\n- `putFile` TBD\n- `safePutFile` TBD\n- `renameFile` TBD\n- `safeRenameFile` TBD\n- `removeFile` TBD\n- `openSftp` TBD\n- `close` TBD\n- `downloadAllFiles` TBD\n\n> The client using the `Sftp` helper should take care of how to send requests to manage remote files. E.g.: multiple concurrency requests to rename a file should be done sequentially to avoid problems (use `Qutils.processList`)\n\n\n#### ProjectCredentialsConfig\nProvides sphere credentials based on the project key.\n\nFollowing files are used to store the credentials and would be searched (descending priority):\n\n* ./.sphere-project-credentials\n* ./.sphere-project-credentials.json\n* ~/.sphere-project-credentials\n* ~/.sphere-project-credentials.json\n* /etc/sphere-project-credentials\n* /etc/sphere-project-credentials.json\n\n#### ElasticIo\n_(Coming soon)_\n\n#### Repeater\n\n Repeater is designed to repeat some arbitrary function unless the execution of this function does not throw any errors\n\n Options:\n\n * **attempts** - Int - how many times execution of the function should be repeated until repeater will give up (default 10)\n * **timeout** - Long - the delay between attempts\n * **timeoutType** - String - The type of the timeout:\n   * `'constant'` - always the same timeout\n   * `'variable'` - timeout grows with the attempts count (it also contains random component)\n\nExample:\n\n```coffeescript\nrepeater = new Repeater {attempts: 10}\n\nrepeater.execute\n  recoverableError: (e) -> e instanceof ErrorStatusCode and e.code is 409\n  task: ->\n    console.info(\"get some stuff..\")\n    console.info(\"update some another things...\")\n    Q(\"Done\")\n```\n\n### Mixins\nCurrently following mixins are provided by `SphereUtils`:\n\n- `Qutils`\n  - `processList`\n- `underscore`\n  - `deepClone`\n  - `prettify`\n  - `percentage`\n  - `stringifyQuery`\n  - `parseQuery`\n\n#### Qutils\nA collections of Q utils (promise-based)\n\n```coffeescript\n{Qutils} = require 'sphere-node-utils'\n```\n\n##### `processList`\nProcess each element in the given list using the function `fn` (called on each iteration).\nThe function `fn` has to return a promise that should be resolved when all elements of the page are processed.\n\n```coffeescript\nlist = [{key: '1'}, {key: '2'}, {key: '3'}]\nprocessList list, (elems) -> # elems is an array\n  doSomethingWith(elems) # it's a promise\n  .then ->\n    # something else\n    anotherPromise()\n```\n\n> Note that the argument passed to the process function is always an array, containing a number of elements defined by `maxParallel` option\n\nYou can pass some options as second argument:\n- `accumulate` whether the results should be accumulated or not (default `true`). If not, an empty array will be returned from the resolved promise.\n- `maxParallel` how many elements from the list will be passed to the process `fn` function (default `1`)\n\n#### Underscore\nA collection of methods to be used as `underscore` mixins. To install\n\n```coffeescript\n_ = require 'underscore'\n{_u} = require 'sphere-node-utils'\n_.mixin _u\n\n# or\n_.mixin require('sphere-node-utils')._u\n```\n\n##### `_.deepClone`\nReturns a deep clone of the given object\n\n```coffeescript\nobj = {...} # some object with nested values\ncloned = _.deepClone(obj)\n```\n\n##### `_.prettify`\nReturns a pretty-print formatted JSON string.\n\n```coffeescript\nobj = foo: 'bar'\npretty = _.prettify(obj) # you can pass the indentation value as optional 2nd argument (default 2)\n# =>\n# \"{\n#   \"foo\": \"bar\"\n# }\"\n```\n\n> If the argument is not a JSON object, the argument itself is returned (also for `Error` instances)\n\n##### `_.percentage`\nReturns the percentage of the given values\n\n```coffeescript\nvalue = _.percentage(30, 500)\n# => 6\n```\n\n##### `_.stringifyQuery`\nReturns a URL query string from a key-value object\n\n```coffeescript\nparams =\n  where: encodeURIComponent('name = \"Foo\"')\n  staged: true\n  limit: 100\n  offset: 2\n_.stringifyQuery(params)\n# => 'where=name%20%3D%20%22Foo%22&staged=true&limit=100&offset=2'\n```\n\n##### `_.parseQuery`\nReturns a key-value JSON object from a query string\n> Note that all values are parsed as string\n\n```coffeescript\nquery = 'where=name%20%3D%20%22Foo%22&staged=true&limit=100&offset=2'\n_.parseQuery(query)\n# => {where: encodeURIComponent('name = \"Foo\"'), staged: 'true', limit: '100', offset: '2'}\n```\n\n## Examples\n_(Coming soon)_\n\n## Contributing\nIn lieu of a formal styleguide, take care to maintain the existing coding style. Add unit tests for any new or changed functionality. Lint and test your code using [Grunt](http://gruntjs.com/).\nMore info [here](CONTRIBUTING.md)\n\n## Releasing\nReleasing a new version is completely automated using the Grunt task `grunt release`.\n\n```javascript\ngrunt release // patch release\ngrunt release:minor // minor release\ngrunt release:major // major release\n```\n\n## License\nCopyright (c) 2014 SPHERE.IO\nLicensed under the [MIT license](LICENSE-MIT).\n",
  "readmeFilename": "README.md",
  "_id": "sphere-node-utils@0.4.12",
  "_from": "sphere-node-utils@0.4.12"
}
